#!/usr/bin/env python
from __future__ import print_function
import argparse
import sys
try:
    import urllib2
except ImportError:
    import urllib.request as urllib2
import os
import json
import hashlib
import io
import stat


LAUNCH_SCRIPT= \
"""#!/bin/sh
DIR=$(dirname $0)
pushd DIR
java -Xmx2G -jar {startfile}
popd
"""
def create_launcher(destdir, startfile):
    if not os.path.isdir(destdir):
        os.path.makedirs(destdir)
    filepth = os.path.join(destdir, 'launch')
    with open(filepth, 'wt') as f:
        f.write(LAUNCH_SCRIPT.format(startfile=startfile))
    os.chmod(filepth, stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)

def to_json(url):
    """Tries to load a url into json, handling both python 2 and 3 (oaky-ish)"""
    try:
        conn = urllib2.urlopen(url)
    except Exception as e:
        print("error w/", url)
        print(e)
        sys.exit(1)
    try:
        result = json.load(io.TextIOWrapper(conn))
    except AttributeError:
        result = json.load(conn)
    return result

class JenkinsBuildUpdater(object):
    """Handles reading jenkins job builds from a url in the format <jenkinsurl>/job/<jobname>/<buildidentifier> (NO trailing slash).
    The Jenkins has to have the JSON API and build information publicly accessible"""
    def __init__(self, job_url):
        self.base_url = job_url
        self.api_url = job_url + "/api/json"
        
    def get_url(self): 
        result = to_json(self.api_url)
        #if len(result['artifacts']) < 1:
        #    result = to_json(self.base_url + "/mavenArtifacts/api/json")
        #    self.base_url = result['moduleRecords'][0]['parent']['url'][:-1]
        #    result = to_json(self.base_url + "/api/json")
        if len(result['artifacts']) < 1:
            return None
            
        chosen_artifact = None
        for artifact in result['artifacts']:
            name = artifact['fileName'];
            if name.endswith(".jar") and not name.endswith('-sources.jar') and not name.endswith('-javadoc.jar'):
                if not chosen_artifact or chosen_artifact['fileName'].startswith('original') and not name.startswith("original"):
                    chosen_artifact = artifact
        if chosen_artifact is None:
            result = to_json(self.base_url + "/mavenArtifacts/api/json")
            self.base_url = result['moduleRecords'][0]['parent']['url'][:-1]
            result = to_json(self.base_url + "/api/json")
            for artifact in result['artifacts']:
                name = artifact['fileName'];
                if name.endswith(".jar") and not name.endswith('-sources.jar') and not name.endswith('-javadoc.jar'):
                    if not chosen_artifact or chosen_artifact['fileName'].startswith('original') and not name.startswith("original"):
                        chosen_artifact = artifact

        return self.base_url + "/artifact/" + chosen_artifact['relativePath']
        
            
class RawUrlUpdateHandler(object):
    """Returns a url as it is given to the constructor"""
    def __init__(self, url):
        self.url = url
        
    def get_url(self):
        return self.url
        

updates = {
    # Plugins
    "worldedit": (JenkinsBuildUpdater("http://build.sk89q.com/job/WorldEdit/lastSuccessfulBuild"), "plugins"),
    "worldguard": (JenkinsBuildUpdater("http://build.sk89q.com/job/WorldGuard/lastSuccessfulBuild"), "plugins"),
    "commandbook": (JenkinsBuildUpdater("http://build.sk89q.com/job/CommandBook/lastSuccessfulBuild"), "plugins"),
    "commandhelper": (JenkinsBuildUpdater("http://build.sk89q.com/job/CommandHelper/lastSuccessfulBuild"), "plugins"),
    "spoutplugin": (JenkinsBuildUpdater("http://build.spout.org/job/SpoutPlugin/lastSuccessfulBuild"), "plugins"),
    "pex": (JenkinsBuildUpdater("http://pex-dev.cloudapp.net/job/PermissionsEx/lastSuccessfulBuild"), "plugins"),
    #CraftBukkits
    "cb-dev": (RawUrlUpdateHandler("http://dl.bukkit.org/latest-dev/craftbukkit.jar"), ""),
    "spigot": (JenkinsBuildUpdater("http://ci.md-5.net/job/Spigot/lastStableBuild"), "")
}

def download_file(remote, destpath, overwrite=False, printstatus=True):
    if os.path.isfile(destpath) and not overwrite:
        return False
    if "ETag" in remote.info() and os.path.isfile(destpath):
        with open(destpath, 'rb') as check:
            remotehash = remote.info()["ETag"]
            localdata = check.read()
            localhash = hashlib.md5(localdata).hexdigest()
            if localhash == remotehash:
                return False
            localhash = hashlib.sha1(localdata).hexdigest()
            if localhash == remotehash:
                return False
    with open(destpath, 'wb') as local:
        file_size = int(remote.info()["Content-Length"])
        file_size_dl = 0
        block_sz = 4096
        while True:
            buf = remote.read(block_sz)
            if not buf:
                break

            file_size_dl += len(buf)
            local.write(buf)
            status = r"{dest} -> {downloaded:6.2f}M  [{percent:3.2f}%]".format(dest=destpath, downloaded=file_size_dl/1000000., percent = file_size_dl * 100 / file_size)
            if printstatus: sys.stdout.writelines([status, chr(8)*(len(status)+1)])
    if printstatus: print()
    return True
    
def create_argument_parser():
    parser = argparse.ArgumentParser(description="Update various files to their latest version")
    parser.add_argument('updates', choices=updates, nargs="+", help="The files to upate")
    parser.add_argument('--basedir', '-b', dest='basedir', default='.', help="The base directory for the installation")
    return parser
    
def getfileext(path):
    return os.path.splitext(path)[1]

if __name__ == "__main__":
    args = create_argument_parser().parse_args()
    for updatename in args.updates:
        update = updates[updatename]
        print("Beginning update of", updatename)

        download_url = update[0].get_url()
        if download_url is None:
            print("Unable to get URL for update", updatename)
            continue

        conn = urllib2.urlopen(download_url)
        dest_file = updatename + getfileext(conn.geturl())
        dest_path = os.path.join(args.basedir, update[1], dest_file)

        base = os.path.dirname(dest_path)
        if not os.path.isdir(base):
            os.makedirs(base)

        download_file(conn, dest_path, True)
        if update[1] == "" and getfileext(dest_file) == ".jar":
            create_launcher(base, dest_file)
        print("Completed update of", updatename)
        
    
    
