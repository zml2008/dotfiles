#!/usr/bin/env python

import configparser
import signal
import subprocess
import sys
import os


class RunOnceTask(object):
    def __init__(self, task):
        self._task = task

    def start(self):
        if self._task is not None:
            print("Starting", self._task)
            self._proc = subprocess.Popen(self._task, shell=True)

    def stop(self):
        print("Killing", self._task)
        if self._proc.poll() is None:
            self._proc.term()
            if self._proc.wait(10) is None:
                self._proc.kill()

class StartStopTask(RunOnceTask):
    def __init__(self, start, stop):
        super(StartStopTask, self).__init__(start)
        self._start = start
        self._stop = stop

    def stop(self):
        print("Stopping with", self._stop)
        if self._stop is not None:
            subprocess.call(self._stop, shell=True, timeout=10)
            if self._proc.poll() is None:
                super(StartStopTask, self).stop()


class StartupList(object):

    def __init__(self, config):
        self._config = configparser.ConfigParser()
        self._config.read(config)
        self.tasks = {}
        self.running_tasks = []
        self.build_tasks()

    def build_tasks(self):
        for section in self._config.sections():
            task = None
            if 'Run' in self._config[section]:
                task = RunOnceTask(self._config[section]["Run"])
            else:
                task = StartStopTask(self._config.get(section, "Start", fallback=None), self._config.get(section, "Stop", fallback=None))
            self.tasks[section] = task

    def start(self, task=None):
        """Starts a task, or all tasks if task is None"""
        try:
            if task:
                task.start()
                self.running_tasks.append(task)
            else:
                for t in self.tasks.values():
                    t.start()
                    self.running_tasks.append(task)
        except Exception as e:
            print(e)
            self.stop(task) # Kill anything that may have already started
                

    def stop(self, task=None):
        if task and task in self.running_tasks:
            task.stop()
            self.running_tasks.remove(task)
        elif not task:
            for t in self.running_tasks:
                t.stop()
            self.running_tasks = []


def main():
    config_file = os.path.join(os.environ["HOME"], ".startup")
    if not os.path.isfile(config_file):
        raise Exception("Autostart configuration does not exist!")

    startup = StartupList(config_file)
    startup.start()
    signal.sigwait((signal.SIGTERM, signal.SIGINT))
    startup.stop()


if __name__ == "__main__":
    main()
